//This file is generated by the AxiomREPL. DO NOT DIRECTLY EDIT THIS FILE!
//To make changes, go to https://repl.axiom.xyz/ and export a new circuit.
//
//                 _                 _____  ______ _____  _
//     /\         (_)               |  __ \|  ____|  __ \| |
//    /  \   __  ___  ___  _ __ ___ | |__) | |__  | |__) | |
//   / /\ \  \ \/ / |/ _ \| '_ ` _ \|  _  /|  __| |  ___/| |
//  / ____ \  >  <| | (_) | | | | | | | \ \| |____| |    | |____
// /_/    \_\/_/\_\_|\___/|_| |_| |_|_|  \_\______|_|    |______|
//
//

import {
  Halo2Lib,
  AxiomData,
  CircuitValue,
  CircuitValue256
} from "@axiom-crypto/core/halo2-js";
const defaultInputs = {
  beginBlock: 8846066,
  endBlock: 8960066,
  provingInterval: 1728000,
  provingAddress: "0x480CFaaccCD709936f8ffb6c6f5E14bDDB97eb99",
  balanceCriteria: 30000000000000000000
};
type CircuitInputType = typeof defaultInputs;
export interface CircuitInputs extends CircuitInputType {}
export interface CircuitValueInputs {
  beginBlock: CircuitValue;
  endBlock: CircuitValue;
  provingInterval: CircuitValue;
  provingAddress: CircuitValue;
  balanceCriteria: CircuitValue;
}
const circuitFn = async (
  halo2Lib: Halo2Lib,
  axiomData: AxiomData,
  {
    beginBlock,
    endBlock,
    provingInterval,
    provingAddress,
    balanceCriteria
  }: CircuitValueInputs
) => {
  const {
    constant,
    add,
    sub,
    and,
    or,
    not,
    select,
    checkEqual,
    checkLessThan,
    value,
    log
  } = halo2Lib;
  const {
    getAccount,
    getReceipt,
    getStorage,
    getTx,
    getHeader,
    getSolidityMapping,
    addToCallback
  } = axiomData;
  //
  //                 _                 _____  ______ _____  _
  //     /\         (_)               |  __ \|  ____|  __ \| |
  //    /  \   __  ___  ___  _ __ ___ | |__) | |__  | |__) | |
  //   / /\ \  \ \/ / |/ _ \| '_ ` _ \|  _  /|  __| |  ___/| |
  //  / ____ \  >  <| | (_) | | | | | | | \ \| |____| |    | |____
  // /_/    \_\/_/\_\_|\___/|_| |_| |_|_|  \_\______|_|    |______|
  //
  //

  // notes:
  // 1. write script
  // 2. test circuit
  // 3. generate keys
  // 4. export ...

  // input:
  // a. beginBlock
  // b. endBlock
  // c. provingInterval
  // d. provingAddress
  // e. balanceCriteria

  // 1. get the begin timestamp with begin block
  // 2. get the end timestamp with end block
  // 3. check end time - begin time > proving interval
  // 4. use a for loop go through all the blocks in between
  //  4.a check during during all the block, the balance is higher than requirement
  // 5. callback proving address

  // example Axiom REPL circuit to prove the first block an account transacted
  // get the previous block number

  // 1.
  const beginTime = getHeader(beginBlock).timestamp();
  // 2.
  const endTime = getHeader(endBlock).timestamp();
  // 3.
  const passTime = sub(endTime.toCircuitValue(), beginTime.toCircuitValue());
  checkLessThan(provingInterval, passTime);

  // 4.
  const startVal = beginBlock.number();
  const endVal = endBlock.number();

  for (let i = startVal; i < endVal; i += 7155) {
    // 4.a
    checkLessThan(
      balanceCriteria,
      getAccount(i, provingAddress)
        .balance()
        .toCircuitValue()
    );
  }
  // 5.
  addToCallback(balanceCriteria);
  addToCallback(provingAddress);
  addToCallback(provingInterval);

  /*
let passBlock = sub(endBlock, beginBlock);
for (let i = 0; i < passBlock.value(); i++) {
    // 4.a
    checkLessThan(balanceCriteria, getAccount(passBlock, address).balance().toCircuitValue());
    passBlock = add(passBlock, constant(1));
}
*/

  /*
let passBlock = sub(endBlock, beginBlock);

for (let i = 0; i < passBlock.value(); i++) {
    // 4.a
    checkLessThan(balanceCriteria, getAccount(passBlock, address).balance().toCircuitValue());
    passBlock = add(passBlock, constant(1));
}
*/

  /*
const prevBlock = sub(claimedBlockNumber, constant(1));

//get the account at the previous block
const accountPrevBlock = getAccount(prevBlock, address);

// get the account nonce at the previous block and assert that it is 0
const prevNonce = accountPrevBlock.nonce().toCircuitValue();
checkEqual(prevNonce, constant(0))

// get the account nonce at the claimed block number
const account = getAccount(claimedBlockNumber, address);
const currNonce = account.nonce().toCircuitValue();

//checks that currNonce > 0 at the claimed block
checkLessThan(constant(0), currNonce)

// add the address and blockNumber to the callback, for it to be passed
// as a result to the callback client contract
addToCallback(address)
addToCallback(claimedBlockNumber);

// Here is a list of all functions you can use to fetch on-chain data in the REPL.
// For more detailed docs and a list of all data and compute functions, see our 
// preview docs at:
//
// docs-v2.axiom.xyz/axiom-repl/axiom-repl
//

// fetch block header data
let header = getHeader(block);
// access the timestamp field
let timestamp = header.timestamp();
// access the gasLimit field
let gasLimit = header.gasLimit();

// fetch account data
let acct = getAccount(block, addr);
// access the account balance at `block`
let balance = acct.balance();
// access the nonce of the account at `block`
let nonce = acct.nonce();

// fetch storage data
let storage = getStorage(block, addr);
// access the value at storage slot `slot`
let slotVal = storage.slot(slot);

// fetch Solidity mapping data
let mapping = getSolidityMapping(block, addr, mappingSlot);
// access the value in the mapping at `mappingSlot` with key `3`
let mappingVal = mapping.key(3);

// fetch transaction data, example is for the transaction below:
// https://goerli.etherscan.io/tx/0xa4f781ad033d6dab5b13e3ab7c7cbdbd0ea4c0a2be3d9ffa7ed1e53d2d5bcc46
let tx = getTx(txBlockNumber, txIdx);
// get the 4-byte function selector that was called
let functionSelector = tx.functionSelector();
// access bytes [32, 64) of calldata
let calldata = tx.calldata(1);

// fetch receipt data, example is for the first event log in the transaction below
// Deposit (index_topic_1 address payor, uint256 amt)
// https://goerli.etherscan.io/tx/0xa4f781ad033d6dab5b13e3ab7c7cbdbd0ea4c0a2be3d9ffa7ed1e53d2d5bcc46
// eventSchema = keccak(Deposit(address,uint256))
const eventSchema = "0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c";
let receipt = getReceipt(txBlockNumber, txIdx);
// access the address that emitted the log event at index 0
let logAddr = receipt.log(0).address();
// access the topic at index 1 of the log event at index 0 and check it has schema eventSchema
// because `address` is indexed in the event, this corresponds to `address`
let topic = receipt.log(0).topic(1, eventSchema); 
// access the first 32 bytes of data in the log event at index 0
// because `amt` is not indexed, this corresponds to `amt`
let data = receipt.log(0).data(0);
*/
};
const config = {
  k: 13,
  numAdvice: 4,
  numLookupAdvice: 1,
  numInstance: 1,
  numLookupBits: 12,
  numVirtualInstance: 2
};
const vk = [
  2,
  13,
  0,
  0,
  0,
  0,
  6,
  0,
  0,
  0,
  22,
  53,
  175,
  191,
  189,
  44,
  47,
  125,
  102,
  223,
  68,
  183,
  53,
  24,
  221,
  245,
  11,
  40,
  210,
  84,
  147,
  34,
  241,
  111,
  251,
  44,
  176,
  97,
  40,
  23,
  111,
  5,
  236,
  172,
  54,
  30,
  205,
  68,
  139,
  37,
  34,
  255,
  110,
  222,
  63,
  213,
  167,
  105,
  46,
  125,
  148,
  2,
  105,
  228,
  6,
  175,
  114,
  9,
  31,
  238,
  182,
  133,
  168,
  45,
  42,
  22,
  162,
  229,
  210,
  144,
  26,
  245,
  196,
  213,
  225,
  66,
  65,
  134,
  142,
  201,
  94,
  32,
  208,
  122,
  57,
  0,
  132,
  3,
  36,
  94,
  130,
  214,
  37,
  59,
  202,
  44,
  138,
  170,
  70,
  234,
  16,
  135,
  123,
  186,
  51,
  207,
  181,
  48,
  208,
  7,
  149,
  89,
  90,
  87,
  2,
  101,
  107,
  84,
  248,
  234,
  214,
  197,
  117,
  17,
  20,
  19,
  29,
  44,
  147,
  62,
  90,
  24,
  251,
  228,
  87,
  112,
  66,
  150,
  158,
  251,
  140,
  158,
  79,
  7,
  199,
  171,
  187,
  158,
  120,
  37,
  100,
  241,
  137,
  214,
  175,
  22,
  88,
  155,
  55,
  9,
  234,
  171,
  193,
  137,
  228,
  193,
  10,
  139,
  94,
  222,
  219,
  118,
  223,
  59,
  19,
  176,
  137,
  88,
  47,
  231,
  228,
  122,
  164,
  242,
  90,
  147,
  185,
  251,
  19,
  117,
  92,
  17,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  47,
  179,
  121,
  67,
  51,
  188,
  79,
  105,
  229,
  152,
  251,
  4,
  77,
  35,
  183,
  141,
  128,
  241,
  128,
  155,
  135,
  6,
  143,
  182,
  59,
  101,
  135,
  180,
  218,
  9,
  20,
  44,
  121,
  21,
  235,
  49,
  5,
  159,
  77,
  175,
  14,
  78,
  105,
  163,
  6,
  61,
  201,
  81,
  23,
  125,
  4,
  27,
  51,
  154,
  216,
  166,
  175,
  107,
  150,
  198,
  94,
  177,
  134,
  3,
  84,
  92,
  54,
  214,
  195,
  173,
  161,
  33,
  163,
  158,
  55,
  83,
  143,
  73,
  63,
  245,
  248,
  101,
  156,
  231,
  13,
  189,
  119,
  156,
  217,
  115,
  6,
  57,
  193,
  208,
  245,
  11,
  78,
  51,
  211,
  72,
  117,
  23,
  146,
  73,
  11,
  135,
  1,
  189,
  196,
  86,
  128,
  120,
  7,
  252,
  165,
  237,
  81,
  35,
  153,
  234,
  8,
  138,
  93,
  226,
  189,
  1,
  171,
  34,
  129,
  32,
  221,
  160,
  2,
  15,
  131,
  249,
  95,
  54,
  190,
  51,
  37,
  210,
  75,
  10,
  123,
  164,
  170,
  220,
  46,
  2,
  32,
  0,
  126,
  162,
  161,
  23,
  118,
  254,
  8,
  8,
  145,
  202,
  133,
  199,
  119,
  206,
  57,
  43,
  71,
  250,
  177,
  202,
  247,
  247,
  49,
  208,
  24,
  55,
  134,
  206,
  167,
  14,
  195,
  5,
  67,
  75,
  229,
  119,
  93,
  216,
  75,
  48,
  129,
  127,
  109,
  132,
  109,
  219,
  168,
  23,
  159,
  8,
  162,
  147,
  15,
  247,
  240,
  86,
  108,
  80,
  248,
  240,
  65,
  159,
  237,
  247,
  215,
  190,
  191,
  70,
  240,
  218,
  95,
  15,
  139,
  84,
  196,
  177,
  252,
  158,
  196,
  233,
  173,
  21,
  59,
  139,
  120,
  126,
  241,
  79,
  176,
  156,
  21,
  225,
  98,
  163,
  218,
  200,
  210,
  106,
  88,
  71,
  32,
  119,
  134,
  30,
  248,
  17,
  160,
  55,
  121,
  168,
  124,
  85,
  5,
  232,
  156,
  11,
  224,
  89,
  116,
  78,
  181,
  45,
  120,
  198,
  223,
  203,
  156,
  189,
  160,
  140,
  117,
  105,
  10,
  53,
  212,
  37,
  140,
  202,
  224,
  95,
  204,
  114,
  5,
  234,
  227,
  19,
  84,
  3,
  218,
  83,
  80,
  10,
  207,
  66,
  72,
  41,
  104,
  80,
  210,
  173,
  6,
  147,
  3,
  3,
  204,
  9,
  218,
  43,
  95,
  38,
  246,
  115,
  211,
  76,
  63,
  50,
  208,
  108,
  113,
  117,
  226,
  47,
  194,
  91,
  219,
  204,
  159,
  121,
  226,
  5,
  102,
  49,
  67,
  184,
  121,
  78,
  69,
  96,
  200,
  11,
  179,
  177,
  65,
  112,
  219,
  135,
  83,
  30,
  119,
  135,
  18,
  240,
  33,
  116,
  98,
  173,
  220,
  244,
  55,
  238,
  58,
  17,
  163,
  106,
  61,
  250,
  2,
  41,
  7,
  145,
  149,
  24,
  182,
  20,
  66,
  216,
  48,
  115,
  219,
  86,
  95,
  48,
  119,
  38,
  106,
  162,
  250,
  158,
  212,
  87,
  61,
  118,
  4,
  164,
  252,
  144,
  246,
  121,
  54,
  103,
  96,
  211,
  125,
  35,
  118,
  45,
  52,
  104,
  142,
  238,
  236,
  210,
  50,
  26,
  118,
  16,
  61,
  59,
  136,
  43,
  92,
  141,
  82,
  101,
  109,
  210,
  42,
  206,
  81,
  169,
  234,
  223,
  227,
  181,
  11,
  13
];
export const circuit = Object.freeze({
  circuit: circuitFn,
  config,
  defaultInputs,
  vk
});
