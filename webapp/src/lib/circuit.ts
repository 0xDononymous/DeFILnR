//This file is generated by the AxiomREPL. DO NOT DIRECTLY EDIT THIS FILE!
//To make changes, go to https://repl.axiom.xyz/ and export a new circuit.
//
//                 _                 _____  ______ _____  _
//     /\         (_)               |  __ \|  ____|  __ \| |
//    /  \   __  ___  ___  _ __ ___ | |__) | |__  | |__) | |
//   / /\ \  \ \/ / |/ _ \| '_ ` _ \|  _  /|  __| |  ___/| |
//  / ____ \  >  <| | (_) | | | | | | | \ \| |____| |    | |____
// /_/    \_\/_/\_\_|\___/|_| |_| |_|_|  \_\______|_|    |______|
//
//

import {
  Halo2Lib,
  AxiomData,
  CircuitValue,
  CircuitValue256,
} from '@axiom-crypto/core/halo2-js'
export const defaultInputs = {
  provingAddress: '0xf13df765f3047850Cede5aA9fDF20a12A75f7F70',
  facadeAddress: '0x15A43dbcD8dBc094f7866c2F458cAb68c35BBe16',
  blockNumber: [7925445, 7926956, 0, 0, 0, 0, 0, 0, 0, 0],
  txIdx: [34, 46, 0, 0, 0, 0, 0, 0, 0, 0],
  logIdx: [5, 3, 0, 0, 0, 0, 0, 0, 0, 0],
}
type CircuitInputType = typeof defaultInputs
export interface CircuitInputs extends CircuitInputType {}
export interface CircuitValueInputs {
  provingAddress: CircuitValue
  facadeAddress: CircuitValue
  blockNumber: CircuitValue[]
  txIdx: CircuitValue[]
  logIdx: CircuitValue[]
}
const circuitFn = async (
  halo2Lib: Halo2Lib,
  axiomData: AxiomData,
  {
    provingAddress,
    facadeAddress,
    blockNumber,
    txIdx,
    logIdx,
  }: CircuitValueInputs
) => {
  const { constant, add, and, or, not, checkEqual, log } = halo2Lib
  const { getReceipt, getTx, addToCallback } = axiomData
  //
  //                 _                 _____  ______ _____  _
  //     /\         (_)               |  __ \|  ____|  __ \| |
  //    /  \   __  ___  ___  _ __ ___ | |__) | |__  | |__) | |
  //   / /\ \  \ \/ / |/ _ \| '_ ` _ \|  _  /|  __| |  ___/| |
  //  / ____ \  >  <| | (_) | | | | | | | \ \| |____| |    | |____
  // /_/    \_\/_/\_\_|\___/|_| |_| |_|_|  \_\______|_|    |______|
  //
  //

  // notes:
  // 1. write script
  // 2. test circuit
  // 3. generate keys
  // 4. export ...

  // input:
  // a. blockNumber[]
  // b. txIdx[]
  // c. logIdx[]
  // d. provingAddress
  // e. facadeAddress

  // example Axiom REPL circuit to prove the first block an account transacted
  // get the previous block number

  // `OpenCreditAccount (address onBehalfOf, address creditAccount, uint256 borrowAmount, uint16 referralCode)` event schema
  const eventSchema =
    '0xfa2baf5d3eb95569f312f22477b246f9d4c50276f1cb3ded8e1aeadcbc07a763'

  let verifyTxCnt = 0

  for (let i = 0; i < blockNumber.length; i++) {
    if (blockNumber[i].number() == 0) {
      break
    }
    // specify and fetch the data you want Axiom to verify
    let receipt = getReceipt(blockNumber[i], txIdx[i])
    let receiptLog = receipt.log(logIdx[i])
    let onBehalfOf = receiptLog.topic(1, eventSchema).toCircuitValue()

    checkEqual(provingAddress, onBehalfOf)

    // get the `to` field of the transaction
    let tx = getTx(blockNumber[i], txIdx[i])
    let txTo = tx.to().toCircuitValue()
    checkEqual(facadeAddress, txTo)
    verifyTxCnt++
  }

  let receipt = getReceipt(blockNumber[0], txIdx[0])
  let receiptLog = receipt.log(logIdx[0])
  let openCASchema = receiptLog.topic(0, eventSchema)

  addToCallback(openCASchema)
  addToCallback(provingAddress)
  addToCallback(facadeAddress)
  addToCallback(constant(verifyTxCnt))
}
const config = {
  k: 13,
  numAdvice: 4,
  numLookupAdvice: 1,
  numInstance: 1,
  numLookupBits: 12,
  numVirtualInstance: 2,
}
const vk = [
  2,
  13,
  0,
  0,
  0,
  0,
  6,
  0,
  0,
  0,
  22,
  53,
  175,
  191,
  189,
  44,
  47,
  125,
  102,
  223,
  68,
  183,
  53,
  24,
  221,
  245,
  11,
  40,
  210,
  84,
  147,
  34,
  241,
  111,
  251,
  44,
  176,
  97,
  40,
  23,
  111,
  5,
  236,
  172,
  54,
  30,
  205,
  68,
  139,
  37,
  34,
  255,
  110,
  222,
  63,
  213,
  167,
  105,
  46,
  125,
  148,
  2,
  105,
  228,
  6,
  175,
  114,
  9,
  31,
  238,
  182,
  133,
  168,
  45,
  185,
  40,
  178,
  93,
  206,
  166,
  213,
  71,
  55,
  159,
  217,
  87,
  18,
  130,
  194,
  219,
  205,
  212,
  42,
  123,
  163,
  155,
  14,
  100,
  177,
  196,
  251,
  57,
  241,
  211,
  10,
  48,
  159,
  96,
  152,
  176,
  105,
  33,
  45,
  105,
  134,
  42,
  59,
  49,
  255,
  97,
  137,
  56,
  254,
  122,
  205,
  231,
  166,
  95,
  52,
  6,
  90,
  134,
  121,
  170,
  228,
  30,
  3,
  30,
  215,
  0,
  206,
  147,
  25,
  228,
  166,
  187,
  222,
  101,
  6,
  95,
  43,
  59,
  190,
  137,
  48,
  208,
  0,
  107,
  162,
  3,
  199,
  63,
  165,
  189,
  223,
  152,
  58,
  25,
  23,
  15,
  89,
  48,
  151,
  249,
  83,
  199,
  241,
  90,
  230,
  150,
  23,
  187,
  84,
  193,
  192,
  246,
  118,
  238,
  25,
  200,
  124,
  240,
  186,
  234,
  248,
  8,
  47,
  48,
  214,
  24,
  150,
  11,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  223,
  159,
  109,
  209,
  107,
  191,
  14,
  153,
  22,
  149,
  0,
  203,
  79,
  214,
  213,
  182,
  132,
  65,
  201,
  72,
  37,
  73,
  186,
  184,
  1,
  92,
  113,
  116,
  32,
  116,
  188,
  40,
  14,
  255,
  113,
  121,
  236,
  113,
  66,
  57,
  80,
  150,
  38,
  7,
  92,
  246,
  168,
  70,
  100,
  4,
  246,
  164,
  226,
  90,
  44,
  190,
  50,
  60,
  213,
  225,
  44,
  128,
  34,
  32,
  186,
  244,
  153,
  179,
  112,
  217,
  113,
  169,
  231,
  193,
  111,
  53,
  200,
  78,
  251,
  225,
  209,
  80,
  51,
  74,
  175,
  229,
  194,
  252,
  42,
  126,
  100,
  11,
  179,
  5,
  140,
  15,
  53,
  75,
  21,
  96,
  223,
  109,
  139,
  37,
  247,
  221,
  112,
  88,
  241,
  60,
  29,
  25,
  201,
  184,
  19,
  229,
  15,
  54,
  52,
  214,
  75,
  32,
  208,
  246,
  138,
  244,
  70,
  0,
  129,
  32,
  221,
  160,
  2,
  15,
  131,
  249,
  95,
  54,
  190,
  51,
  37,
  210,
  75,
  10,
  123,
  164,
  170,
  220,
  46,
  2,
  32,
  0,
  126,
  162,
  161,
  23,
  118,
  254,
  8,
  8,
  145,
  202,
  133,
  199,
  119,
  206,
  57,
  43,
  71,
  250,
  177,
  202,
  247,
  247,
  49,
  208,
  24,
  55,
  134,
  206,
  167,
  14,
  195,
  5,
  67,
  75,
  229,
  119,
  93,
  216,
  75,
  48,
  129,
  127,
  109,
  132,
  109,
  219,
  168,
  23,
  159,
  8,
  162,
  147,
  15,
  247,
  240,
  86,
  108,
  80,
  248,
  240,
  65,
  159,
  237,
  247,
  215,
  190,
  191,
  70,
  240,
  218,
  95,
  15,
  139,
  84,
  196,
  177,
  252,
  158,
  196,
  233,
  173,
  21,
  59,
  139,
  120,
  126,
  241,
  79,
  176,
  156,
  21,
  225,
  98,
  163,
  218,
  200,
  210,
  106,
  88,
  71,
  32,
  119,
  134,
  30,
  248,
  17,
  160,
  55,
  121,
  168,
  124,
  85,
  5,
  232,
  156,
  11,
  224,
  89,
  116,
  78,
  181,
  45,
  120,
  198,
  223,
  203,
  156,
  189,
  160,
  140,
  117,
  105,
  10,
  53,
  212,
  37,
  140,
  202,
  224,
  95,
  204,
  114,
  5,
  234,
  227,
  19,
  84,
  3,
  218,
  83,
  80,
  10,
  207,
  66,
  72,
  41,
  104,
  80,
  210,
  173,
  6,
  147,
  3,
  3,
  204,
  9,
  218,
  43,
  3,
  100,
  74,
  223,
  119,
  207,
  198,
  25,
  164,
  23,
  204,
  60,
  36,
  45,
  50,
  72,
  238,
  6,
  150,
  228,
  202,
  247,
  173,
  34,
  134,
  5,
  193,
  158,
  66,
  148,
  249,
  46,
  144,
  221,
  190,
  140,
  126,
  116,
  227,
  164,
  131,
  184,
  25,
  215,
  192,
  20,
  247,
  0,
  88,
  140,
  147,
  169,
  187,
  195,
  160,
  246,
  246,
  88,
  87,
  122,
  66,
  98,
  71,
  1,
  27,
  164,
  175,
  69,
  226,
  102,
  11,
  66,
  200,
  192,
  183,
  74,
  137,
  159,
  69,
  7,
  135,
  124,
  121,
  145,
  95,
  58,
  218,
  0,
  140,
  197,
  128,
  9,
  197,
  19,
  175,
  33,
  130,
  141,
  126,
  26,
  89,
  93,
  234,
  169,
  236,
  221,
  59,
  5,
  162,
  17,
  79,
  214,
  11,
  135,
  75,
  165,
  232,
  70,
  119,
  31,
  193,
  65,
  216,
  197,
  100,
  139,
  186,
  29,
]
export const circuit = Object.freeze({
  circuit: circuitFn,
  config,
  defaultInputs,
  vk,
})
