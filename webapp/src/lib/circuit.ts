//This file is generated by the AxiomREPL. DO NOT DIRECTLY EDIT THIS FILE!
//To make changes, go to https://repl.axiom.xyz/ and export a new circuit.
//
//                 _                 _____  ______ _____  _
//     /\         (_)               |  __ \|  ____|  __ \| |
//    /  \   __  ___  ___  _ __ ___ | |__) | |__  | |__) | |
//   / /\ \  \ \/ / |/ _ \| '_ ` _ \|  _  /|  __| |  ___/| |
//  / ____ \  >  <| | (_) | | | | | | | \ \| |____| |    | |____
// /_/    \_\/_/\_\_|\___/|_| |_| |_|_|  \_\______|_|    |______|
//
//

import {
  Halo2Lib,
  AxiomData,
  CircuitValue,
  CircuitValue256,
} from '@axiom-crypto/core/halo2-js'
const defaultInputs = {
  provingAddress: '0xf13df765f3047850Cede5aA9fDF20a12A75f7F70',
  facadeAddress: '0x15A43dbcD8dBc094f7866c2F458cAb68c35BBe16',
  blockNumber: [7925445, 7926956],
  txIdx: [34, 46],
  logIdx: [5, 3],
}
type CircuitInputType = typeof defaultInputs
export interface CircuitInputs extends CircuitInputType {}
export interface CircuitValueInputs {
  provingAddress: CircuitValue
  facadeAddress: CircuitValue
  blockNumber: CircuitValue[]
  txIdx: CircuitValue[]
  logIdx: CircuitValue[]
}
const circuitFn = async (
  halo2Lib: Halo2Lib,
  axiomData: AxiomData,
  {
    provingAddress,
    facadeAddress,
    blockNumber,
    txIdx,
    logIdx,
  }: CircuitValueInputs
) => {
  const { add, and, or, not, checkEqual, log } = halo2Lib
  const { getReceipt, getTx, addToCallback } = axiomData
  //
  //                 _                 _____  ______ _____  _
  //     /\         (_)               |  __ \|  ____|  __ \| |
  //    /  \   __  ___  ___  _ __ ___ | |__) | |__  | |__) | |
  //   / /\ \  \ \/ / |/ _ \| '_ ` _ \|  _  /|  __| |  ___/| |
  //  / ____ \  >  <| | (_) | | | | | | | \ \| |____| |    | |____
  // /_/    \_\/_/\_\_|\___/|_| |_| |_|_|  \_\______|_|    |______|
  //
  //

  // notes:
  // 1. write script
  // 2. test circuit
  // 3. generate keys
  // 4. export ...

  // input:
  // a. blockNumber[]
  // b. txIdx[]
  // c. logIdx[]
  // d. provingAddress
  // e. facadeAddress

  // example Axiom REPL circuit to prove the first block an account transacted
  // get the previous block number

  // `OpenCreditAccount (address onBehalfOf, address creditAccount, uint256 borrowAmount, uint16 referralCode)` event schema
  const eventSchema =
    '0xfa2baf5d3eb95569f312f22477b246f9d4c50276f1cb3ded8e1aeadcbc07a763'

  for (let i = 0; i < blockNumber.length; i++) {
    // specify and fetch the data you want Axiom to verify
    let receipt = getReceipt(blockNumber[i], txIdx[i])
    let receiptLog = receipt.log(logIdx[i])
    let onBehalfOf = receiptLog.topic(1, eventSchema).toCircuitValue()

    checkEqual(provingAddress, onBehalfOf)

    // get the `to` field of the transaction
    let tx = getTx(blockNumber[i], txIdx[i])
    let txTo = tx.to().toCircuitValue()
    checkEqual(facadeAddress, txTo)
  }

  let receipt = getReceipt(blockNumber[0], txIdx[0])
  let receiptLog = receipt.log(logIdx[0])
  let openCASchema = receiptLog.topic(0, eventSchema)

  addToCallback(openCASchema)
  addToCallback(provingAddress)
  addToCallback(facadeAddress)
}
const config = {
  k: 13,
  numAdvice: 4,
  numLookupAdvice: 1,
  numInstance: 1,
  numLookupBits: 12,
  numVirtualInstance: 2,
}
const vk = [
  2, 13, 0, 0, 0, 0, 6, 0, 0, 0, 22, 53, 175, 191, 189, 44, 47, 125, 102, 223,
  68, 183, 53, 24, 221, 245, 11, 40, 210, 84, 147, 34, 241, 111, 251, 44, 176,
  97, 40, 23, 111, 5, 236, 172, 54, 30, 205, 68, 139, 37, 34, 255, 110, 222, 63,
  213, 167, 105, 46, 125, 148, 2, 105, 228, 6, 175, 114, 9, 31, 238, 182, 133,
  168, 45, 128, 137, 82, 92, 142, 37, 165, 150, 117, 59, 194, 42, 188, 146, 116,
  221, 70, 189, 178, 236, 36, 157, 148, 150, 164, 146, 182, 85, 40, 106, 204,
  19, 141, 193, 18, 146, 164, 133, 132, 138, 193, 14, 119, 24, 215, 224, 9, 163,
  130, 26, 175, 14, 202, 16, 184, 165, 102, 5, 0, 33, 152, 76, 148, 21, 114,
  104, 145, 64, 57, 122, 36, 164, 119, 89, 199, 40, 167, 54, 14, 118, 177, 230,
  107, 112, 42, 88, 148, 128, 107, 86, 166, 185, 214, 21, 14, 29, 176, 250, 99,
  92, 235, 72, 34, 126, 242, 94, 244, 58, 221, 67, 183, 103, 108, 83, 31, 121,
  206, 114, 220, 69, 193, 80, 199, 226, 98, 115, 90, 24, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 19, 207, 196, 172, 19, 196, 181, 47, 48, 248, 238, 137, 127, 195, 162,
  202, 108, 19, 69, 41, 133, 245, 150, 242, 236, 209, 49, 38, 101, 230, 177, 13,
  133, 241, 202, 28, 172, 206, 253, 23, 215, 191, 192, 94, 249, 101, 231, 85,
  172, 42, 99, 65, 182, 172, 41, 45, 64, 63, 99, 8, 113, 115, 253, 41, 235, 129,
  234, 113, 246, 121, 38, 147, 254, 113, 56, 213, 157, 30, 252, 227, 177, 188,
  167, 119, 185, 131, 80, 40, 0, 177, 124, 197, 6, 110, 164, 42, 50, 75, 122,
  250, 245, 91, 158, 210, 87, 203, 26, 224, 65, 127, 44, 148, 183, 2, 216, 133,
  205, 8, 33, 169, 114, 92, 188, 210, 162, 200, 99, 45, 129, 32, 221, 160, 2,
  15, 131, 249, 95, 54, 190, 51, 37, 210, 75, 10, 123, 164, 170, 220, 46, 2, 32,
  0, 126, 162, 161, 23, 118, 254, 8, 8, 145, 202, 133, 199, 119, 206, 57, 43,
  71, 250, 177, 202, 247, 247, 49, 208, 24, 55, 134, 206, 167, 14, 195, 5, 67,
  75, 229, 119, 93, 216, 75, 48, 129, 127, 109, 132, 109, 219, 168, 23, 159, 8,
  162, 147, 15, 247, 240, 86, 108, 80, 248, 240, 65, 159, 237, 247, 215, 190,
  191, 70, 240, 218, 95, 15, 139, 84, 196, 177, 252, 158, 196, 233, 173, 21, 59,
  139, 120, 126, 241, 79, 176, 156, 21, 225, 98, 163, 218, 200, 210, 106, 88,
  71, 32, 119, 134, 30, 248, 17, 160, 55, 121, 168, 124, 85, 5, 232, 156, 11,
  224, 89, 116, 78, 181, 45, 120, 198, 223, 203, 156, 189, 160, 140, 117, 105,
  10, 53, 212, 37, 140, 202, 224, 95, 204, 114, 5, 234, 227, 19, 84, 3, 218, 83,
  80, 10, 207, 66, 72, 41, 104, 80, 210, 173, 6, 147, 3, 3, 204, 9, 218, 43,
  209, 74, 49, 121, 149, 101, 36, 238, 101, 167, 165, 16, 141, 54, 235, 14, 31,
  134, 96, 155, 66, 93, 161, 221, 108, 75, 205, 3, 102, 244, 203, 9, 58, 224,
  176, 143, 163, 146, 55, 183, 37, 101, 119, 65, 69, 239, 242, 172, 25, 101, 86,
  234, 121, 24, 57, 0, 242, 60, 155, 130, 39, 143, 25, 42, 127, 23, 4, 218, 197,
  207, 78, 14, 110, 123, 83, 27, 95, 137, 20, 29, 43, 95, 80, 162, 140, 242, 96,
  226, 1, 143, 176, 163, 247, 118, 183, 18, 210, 235, 112, 9, 186, 221, 50, 4,
  136, 144, 132, 23, 168, 87, 246, 59, 82, 92, 143, 89, 249, 125, 113, 146, 183,
  8, 187, 46, 105, 2, 227, 26,
]
export const circuit = Object.freeze({
  circuit: circuitFn,
  config,
  defaultInputs,
  vk,
})
