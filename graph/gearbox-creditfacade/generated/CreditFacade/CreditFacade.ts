// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddCollateral extends ethereum.Event {
  get params(): AddCollateral__Params {
    return new AddCollateral__Params(this);
  }
}

export class AddCollateral__Params {
  _event: AddCollateral;

  constructor(event: AddCollateral) {
    this._event = event;
  }

  get onBehalfOf(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BlacklistHelperSet extends ethereum.Event {
  get params(): BlacklistHelperSet__Params {
    return new BlacklistHelperSet__Params(this);
  }
}

export class BlacklistHelperSet__Params {
  _event: BlacklistHelperSet;

  constructor(event: BlacklistHelperSet) {
    this._event = event;
  }

  get blacklistHelper(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CloseCreditAccount extends ethereum.Event {
  get params(): CloseCreditAccount__Params {
    return new CloseCreditAccount__Params(this);
  }
}

export class CloseCreditAccount__Params {
  _event: CloseCreditAccount;

  constructor(event: CloseCreditAccount) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DecreaseBorrowedAmount extends ethereum.Event {
  get params(): DecreaseBorrowedAmount__Params {
    return new DecreaseBorrowedAmount__Params(this);
  }
}

export class DecreaseBorrowedAmount__Params {
  _event: DecreaseBorrowedAmount;

  constructor(event: DecreaseBorrowedAmount) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class IncreaseBorrowedAmount extends ethereum.Event {
  get params(): IncreaseBorrowedAmount__Params {
    return new IncreaseBorrowedAmount__Params(this);
  }
}

export class IncreaseBorrowedAmount__Params {
  _event: IncreaseBorrowedAmount;

  constructor(event: IncreaseBorrowedAmount) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LiquidateCreditAccount extends ethereum.Event {
  get params(): LiquidateCreditAccount__Params {
    return new LiquidateCreditAccount__Params(this);
  }
}

export class LiquidateCreditAccount__Params {
  _event: LiquidateCreditAccount;

  constructor(event: LiquidateCreditAccount) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get liquidator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get remainingFunds(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LiquidateExpiredCreditAccount extends ethereum.Event {
  get params(): LiquidateExpiredCreditAccount__Params {
    return new LiquidateExpiredCreditAccount__Params(this);
  }
}

export class LiquidateExpiredCreditAccount__Params {
  _event: LiquidateExpiredCreditAccount;

  constructor(event: LiquidateExpiredCreditAccount) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get liquidator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get remainingFunds(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class MultiCallFinished extends ethereum.Event {
  get params(): MultiCallFinished__Params {
    return new MultiCallFinished__Params(this);
  }
}

export class MultiCallFinished__Params {
  _event: MultiCallFinished;

  constructor(event: MultiCallFinished) {
    this._event = event;
  }
}

export class MultiCallStarted extends ethereum.Event {
  get params(): MultiCallStarted__Params {
    return new MultiCallStarted__Params(this);
  }
}

export class MultiCallStarted__Params {
  _event: MultiCallStarted;

  constructor(event: MultiCallStarted) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OpenCreditAccount extends ethereum.Event {
  get params(): OpenCreditAccount__Params {
    return new OpenCreditAccount__Params(this);
  }
}

export class OpenCreditAccount__Params {
  _event: OpenCreditAccount;

  constructor(event: OpenCreditAccount) {
    this._event = event;
  }

  get onBehalfOf(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get creditAccount(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get borrowAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get referralCode(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class TokenDisabled extends ethereum.Event {
  get params(): TokenDisabled__Params {
    return new TokenDisabled__Params(this);
  }
}

export class TokenDisabled__Params {
  _event: TokenDisabled;

  constructor(event: TokenDisabled) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TokenEnabled extends ethereum.Event {
  get params(): TokenEnabled__Params {
    return new TokenEnabled__Params(this);
  }
}

export class TokenEnabled__Params {
  _event: TokenEnabled;

  constructor(event: TokenEnabled) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TransferAccount extends ethereum.Event {
  get params(): TransferAccount__Params {
    return new TransferAccount__Params(this);
  }
}

export class TransferAccount__Params {
  _event: TransferAccount;

  constructor(event: TransferAccount) {
    this._event = event;
  }

  get oldOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TransferAccountAllowed extends ethereum.Event {
  get params(): TransferAccountAllowed__Params {
    return new TransferAccountAllowed__Params(this);
  }
}

export class TransferAccountAllowed__Params {
  _event: TransferAccountAllowed;

  constructor(event: TransferAccountAllowed) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get state(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class UnderlyingSentToBlacklistHelper extends ethereum.Event {
  get params(): UnderlyingSentToBlacklistHelper__Params {
    return new UnderlyingSentToBlacklistHelper__Params(this);
  }
}

export class UnderlyingSentToBlacklistHelper__Params {
  _event: UnderlyingSentToBlacklistHelper;

  constructor(event: UnderlyingSentToBlacklistHelper) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class CreditFacade__calcTotalValueResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getTotal(): BigInt {
    return this.value0;
  }

  getTwv(): BigInt {
    return this.value1;
  }
}

export class CreditFacade__limitsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getMinBorrowedAmount(): BigInt {
    return this.value0;
  }

  getMaxBorrowedAmount(): BigInt {
    return this.value1;
  }
}

export class CreditFacade__paramsResult {
  value0: BigInt;
  value1: boolean;
  value2: BigInt;

  constructor(value0: BigInt, value1: boolean, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getMaxBorrowedAmountPerBlock(): BigInt {
    return this.value0;
  }

  getIsIncreaseDebtForbidden(): boolean {
    return this.value1;
  }

  getExpirationDate(): BigInt {
    return this.value2;
  }
}

export class CreditFacade extends ethereum.SmartContract {
  static bind(address: Address): CreditFacade {
    return new CreditFacade("CreditFacade", address);
  }

  blacklistHelper(): Address {
    let result = super.call(
      "blacklistHelper",
      "blacklistHelper():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_blacklistHelper(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "blacklistHelper",
      "blacklistHelper():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  calcCreditAccountHealthFactor(creditAccount: Address): BigInt {
    let result = super.call(
      "calcCreditAccountHealthFactor",
      "calcCreditAccountHealthFactor(address):(uint256)",
      [ethereum.Value.fromAddress(creditAccount)]
    );

    return result[0].toBigInt();
  }

  try_calcCreditAccountHealthFactor(
    creditAccount: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcCreditAccountHealthFactor",
      "calcCreditAccountHealthFactor(address):(uint256)",
      [ethereum.Value.fromAddress(creditAccount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcTotalValue(creditAccount: Address): CreditFacade__calcTotalValueResult {
    let result = super.call(
      "calcTotalValue",
      "calcTotalValue(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(creditAccount)]
    );

    return new CreditFacade__calcTotalValueResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_calcTotalValue(
    creditAccount: Address
  ): ethereum.CallResult<CreditFacade__calcTotalValueResult> {
    let result = super.tryCall(
      "calcTotalValue",
      "calcTotalValue(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(creditAccount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CreditFacade__calcTotalValueResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  creditManager(): Address {
    let result = super.call("creditManager", "creditManager():(address)", []);

    return result[0].toAddress();
  }

  try_creditManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "creditManager",
      "creditManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  degenNFT(): Address {
    let result = super.call("degenNFT", "degenNFT():(address)", []);

    return result[0].toAddress();
  }

  try_degenNFT(): ethereum.CallResult<Address> {
    let result = super.tryCall("degenNFT", "degenNFT():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hasOpenedCreditAccount(borrower: Address): boolean {
    let result = super.call(
      "hasOpenedCreditAccount",
      "hasOpenedCreditAccount(address):(bool)",
      [ethereum.Value.fromAddress(borrower)]
    );

    return result[0].toBoolean();
  }

  try_hasOpenedCreditAccount(borrower: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasOpenedCreditAccount",
      "hasOpenedCreditAccount(address):(bool)",
      [ethereum.Value.fromAddress(borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isBlacklistableUnderlying(): boolean {
    let result = super.call(
      "isBlacklistableUnderlying",
      "isBlacklistableUnderlying():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_isBlacklistableUnderlying(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isBlacklistableUnderlying",
      "isBlacklistableUnderlying():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTokenAllowed(token: Address): boolean {
    let result = super.call(
      "isTokenAllowed",
      "isTokenAllowed(address):(bool)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBoolean();
  }

  try_isTokenAllowed(token: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTokenAllowed",
      "isTokenAllowed(address):(bool)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  limits(): CreditFacade__limitsResult {
    let result = super.call("limits", "limits():(uint128,uint128)", []);

    return new CreditFacade__limitsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_limits(): ethereum.CallResult<CreditFacade__limitsResult> {
    let result = super.tryCall("limits", "limits():(uint128,uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CreditFacade__limitsResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  params(): CreditFacade__paramsResult {
    let result = super.call("params", "params():(uint128,bool,uint40)", []);

    return new CreditFacade__paramsResult(
      result[0].toBigInt(),
      result[1].toBoolean(),
      result[2].toBigInt()
    );
  }

  try_params(): ethereum.CallResult<CreditFacade__paramsResult> {
    let result = super.tryCall("params", "params():(uint128,bool,uint40)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CreditFacade__paramsResult(
        value[0].toBigInt(),
        value[1].toBoolean(),
        value[2].toBigInt()
      )
    );
  }

  transfersAllowed(from: Address, to: Address): boolean {
    let result = super.call(
      "transfersAllowed",
      "transfersAllowed(address,address):(bool)",
      [ethereum.Value.fromAddress(from), ethereum.Value.fromAddress(to)]
    );

    return result[0].toBoolean();
  }

  try_transfersAllowed(
    from: Address,
    to: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transfersAllowed",
      "transfersAllowed(address,address):(bool)",
      [ethereum.Value.fromAddress(from), ethereum.Value.fromAddress(to)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  underlying(): Address {
    let result = super.call("underlying", "underlying():(address)", []);

    return result[0].toAddress();
  }

  try_underlying(): ethereum.CallResult<Address> {
    let result = super.tryCall("underlying", "underlying():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  version(): BigInt {
    let result = super.call("version", "version():(uint256)", []);

    return result[0].toBigInt();
  }

  try_version(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("version", "version():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddCollateralCall extends ethereum.Call {
  get inputs(): AddCollateralCall__Inputs {
    return new AddCollateralCall__Inputs(this);
  }

  get outputs(): AddCollateralCall__Outputs {
    return new AddCollateralCall__Outputs(this);
  }
}

export class AddCollateralCall__Inputs {
  _call: AddCollateralCall;

  constructor(call: AddCollateralCall) {
    this._call = call;
  }

  get onBehalfOf(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddCollateralCall__Outputs {
  _call: AddCollateralCall;

  constructor(call: AddCollateralCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get targetContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class ApproveAccountTransferCall extends ethereum.Call {
  get inputs(): ApproveAccountTransferCall__Inputs {
    return new ApproveAccountTransferCall__Inputs(this);
  }

  get outputs(): ApproveAccountTransferCall__Outputs {
    return new ApproveAccountTransferCall__Outputs(this);
  }
}

export class ApproveAccountTransferCall__Inputs {
  _call: ApproveAccountTransferCall;

  constructor(call: ApproveAccountTransferCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get state(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class ApproveAccountTransferCall__Outputs {
  _call: ApproveAccountTransferCall;

  constructor(call: ApproveAccountTransferCall) {
    this._call = call;
  }
}

export class CloseCreditAccountCall extends ethereum.Call {
  get inputs(): CloseCreditAccountCall__Inputs {
    return new CloseCreditAccountCall__Inputs(this);
  }

  get outputs(): CloseCreditAccountCall__Outputs {
    return new CloseCreditAccountCall__Outputs(this);
  }
}

export class CloseCreditAccountCall__Inputs {
  _call: CloseCreditAccountCall;

  constructor(call: CloseCreditAccountCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get skipTokenMask(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get convertWETH(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get calls(): Array<CloseCreditAccountCallCallsStruct> {
    return this._call.inputValues[3].value.toTupleArray<
      CloseCreditAccountCallCallsStruct
    >();
  }
}

export class CloseCreditAccountCall__Outputs {
  _call: CloseCreditAccountCall;

  constructor(call: CloseCreditAccountCall) {
    this._call = call;
  }
}

export class CloseCreditAccountCallCallsStruct extends ethereum.Tuple {
  get target(): Address {
    return this[0].toAddress();
  }

  get callData(): Bytes {
    return this[1].toBytes();
  }
}

export class DecreaseDebtCall extends ethereum.Call {
  get inputs(): DecreaseDebtCall__Inputs {
    return new DecreaseDebtCall__Inputs(this);
  }

  get outputs(): DecreaseDebtCall__Outputs {
    return new DecreaseDebtCall__Outputs(this);
  }
}

export class DecreaseDebtCall__Inputs {
  _call: DecreaseDebtCall;

  constructor(call: DecreaseDebtCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DecreaseDebtCall__Outputs {
  _call: DecreaseDebtCall;

  constructor(call: DecreaseDebtCall) {
    this._call = call;
  }
}

export class EnableTokenCall extends ethereum.Call {
  get inputs(): EnableTokenCall__Inputs {
    return new EnableTokenCall__Inputs(this);
  }

  get outputs(): EnableTokenCall__Outputs {
    return new EnableTokenCall__Outputs(this);
  }
}

export class EnableTokenCall__Inputs {
  _call: EnableTokenCall;

  constructor(call: EnableTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class EnableTokenCall__Outputs {
  _call: EnableTokenCall;

  constructor(call: EnableTokenCall) {
    this._call = call;
  }
}

export class IncreaseDebtCall extends ethereum.Call {
  get inputs(): IncreaseDebtCall__Inputs {
    return new IncreaseDebtCall__Inputs(this);
  }

  get outputs(): IncreaseDebtCall__Outputs {
    return new IncreaseDebtCall__Outputs(this);
  }
}

export class IncreaseDebtCall__Inputs {
  _call: IncreaseDebtCall;

  constructor(call: IncreaseDebtCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class IncreaseDebtCall__Outputs {
  _call: IncreaseDebtCall;

  constructor(call: IncreaseDebtCall) {
    this._call = call;
  }
}

export class LiquidateCreditAccountCall extends ethereum.Call {
  get inputs(): LiquidateCreditAccountCall__Inputs {
    return new LiquidateCreditAccountCall__Inputs(this);
  }

  get outputs(): LiquidateCreditAccountCall__Outputs {
    return new LiquidateCreditAccountCall__Outputs(this);
  }
}

export class LiquidateCreditAccountCall__Inputs {
  _call: LiquidateCreditAccountCall;

  constructor(call: LiquidateCreditAccountCall) {
    this._call = call;
  }

  get borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get skipTokenMask(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get convertWETH(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get calls(): Array<LiquidateCreditAccountCallCallsStruct> {
    return this._call.inputValues[4].value.toTupleArray<
      LiquidateCreditAccountCallCallsStruct
    >();
  }
}

export class LiquidateCreditAccountCall__Outputs {
  _call: LiquidateCreditAccountCall;

  constructor(call: LiquidateCreditAccountCall) {
    this._call = call;
  }
}

export class LiquidateCreditAccountCallCallsStruct extends ethereum.Tuple {
  get target(): Address {
    return this[0].toAddress();
  }

  get callData(): Bytes {
    return this[1].toBytes();
  }
}

export class LiquidateExpiredCreditAccountCall extends ethereum.Call {
  get inputs(): LiquidateExpiredCreditAccountCall__Inputs {
    return new LiquidateExpiredCreditAccountCall__Inputs(this);
  }

  get outputs(): LiquidateExpiredCreditAccountCall__Outputs {
    return new LiquidateExpiredCreditAccountCall__Outputs(this);
  }
}

export class LiquidateExpiredCreditAccountCall__Inputs {
  _call: LiquidateExpiredCreditAccountCall;

  constructor(call: LiquidateExpiredCreditAccountCall) {
    this._call = call;
  }

  get borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get skipTokenMask(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get convertWETH(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get calls(): Array<LiquidateExpiredCreditAccountCallCallsStruct> {
    return this._call.inputValues[4].value.toTupleArray<
      LiquidateExpiredCreditAccountCallCallsStruct
    >();
  }
}

export class LiquidateExpiredCreditAccountCall__Outputs {
  _call: LiquidateExpiredCreditAccountCall;

  constructor(call: LiquidateExpiredCreditAccountCall) {
    this._call = call;
  }
}

export class LiquidateExpiredCreditAccountCallCallsStruct extends ethereum.Tuple {
  get target(): Address {
    return this[0].toAddress();
  }

  get callData(): Bytes {
    return this[1].toBytes();
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get calls(): Array<MulticallCallCallsStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      MulticallCallCallsStruct
    >();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }
}

export class MulticallCallCallsStruct extends ethereum.Tuple {
  get target(): Address {
    return this[0].toAddress();
  }

  get callData(): Bytes {
    return this[1].toBytes();
  }
}

export class OpenCreditAccountCall extends ethereum.Call {
  get inputs(): OpenCreditAccountCall__Inputs {
    return new OpenCreditAccountCall__Inputs(this);
  }

  get outputs(): OpenCreditAccountCall__Outputs {
    return new OpenCreditAccountCall__Outputs(this);
  }
}

export class OpenCreditAccountCall__Inputs {
  _call: OpenCreditAccountCall;

  constructor(call: OpenCreditAccountCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get onBehalfOf(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get leverageFactor(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get referralCode(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class OpenCreditAccountCall__Outputs {
  _call: OpenCreditAccountCall;

  constructor(call: OpenCreditAccountCall) {
    this._call = call;
  }
}

export class OpenCreditAccountMulticallCall extends ethereum.Call {
  get inputs(): OpenCreditAccountMulticallCall__Inputs {
    return new OpenCreditAccountMulticallCall__Inputs(this);
  }

  get outputs(): OpenCreditAccountMulticallCall__Outputs {
    return new OpenCreditAccountMulticallCall__Outputs(this);
  }
}

export class OpenCreditAccountMulticallCall__Inputs {
  _call: OpenCreditAccountMulticallCall;

  constructor(call: OpenCreditAccountMulticallCall) {
    this._call = call;
  }

  get borrowedAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get onBehalfOf(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get calls(): Array<OpenCreditAccountMulticallCallCallsStruct> {
    return this._call.inputValues[2].value.toTupleArray<
      OpenCreditAccountMulticallCallCallsStruct
    >();
  }

  get referralCode(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class OpenCreditAccountMulticallCall__Outputs {
  _call: OpenCreditAccountMulticallCall;

  constructor(call: OpenCreditAccountMulticallCall) {
    this._call = call;
  }
}

export class OpenCreditAccountMulticallCallCallsStruct extends ethereum.Tuple {
  get target(): Address {
    return this[0].toAddress();
  }

  get callData(): Bytes {
    return this[1].toBytes();
  }
}

export class TransferAccountOwnershipCall extends ethereum.Call {
  get inputs(): TransferAccountOwnershipCall__Inputs {
    return new TransferAccountOwnershipCall__Inputs(this);
  }

  get outputs(): TransferAccountOwnershipCall__Outputs {
    return new TransferAccountOwnershipCall__Outputs(this);
  }
}

export class TransferAccountOwnershipCall__Inputs {
  _call: TransferAccountOwnershipCall;

  constructor(call: TransferAccountOwnershipCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferAccountOwnershipCall__Outputs {
  _call: TransferAccountOwnershipCall;

  constructor(call: TransferAccountOwnershipCall) {
    this._call = call;
  }
}
